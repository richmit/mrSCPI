=mrSCPI= is a software tool for controlling programmable test equipment; however, I think of =mrSCPI= as more of a test bench productivity tool.

From a software/hardware architectural perspective, programmable test equipment is designed in such a way so as to make very complex test automation possible.
Systems designed from the ground up to support very complex use cases frequently overly complicate things for people with simple use cases. Larry Wall
captured the phenomenon quite clearly when he said:

#+BEGIN_EXAMPLE
               Perl makes easy things easy and hard things possible. 
               Professional programming languages tend to make all things equally difficult.
#+END_EXAMPLE

=mrSCPI= aims to make it possible to easily integrate test equipment automation into *my* day to day bench workflow.  The goal is to make it so easy that I
use it even for the hundreds of tiny, repetitive tasks I preform at the bench.

If you are wondering if =mrSCPI= is for you, that emphasized "*my*" is a warning!  =mrSCPI= is very much designed around my personal workflow and
tool preferences.  I very much like command line tools with UNIX'ish interfaces.  If this sounds like you, then =mrSCPI= might be for you.  OTOH, if you
were looking for a nice GUI to control your equipment, then you will most likely be quite disappointed with =mrSCPI=.

Lastly, =mrSCPI= is simple to set-up so I can run it anyplace.  It has no dependencies beyond a standard Ruby install.  No drivers.  No modules.  No
packages.  No PIPs. No GEMs.  Nothing to compile. Just a single script -- yes, the library and the executable are the *same file*!

Read more:

  - Documentation: https://richmit.github.io/mrSCPI/
  - Additional examples: https://github.com/richmit/TestEquipmentScripts


